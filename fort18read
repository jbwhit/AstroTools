#!/usr/bin/env python
# fort18read.py
# 
# For use with my AstroTools scripts. Parses the body part of a fort.18 file
# and checks for various problems.
# 
# Copyright 2012 Jonathan Whitmore 
# Distributed under the Boost Software License, Version 1.0.
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated
# by a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND
# NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
# DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY,
# WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# 

import sys
import re
import string
import heapq
import numpy as np
import cPickle as pickle
import argparse
import zlib

def main():
  """docstring for main"""
  parser = argparse.ArgumentParser(description='Parse.')
  parser.add_argument('analysisFile', action="store", nargs='?', default='test.analysis.p', type=str) # Positional 
  parser.add_argument('fitIterationsFile', action="store", nargs='?', default='', type=str) # Positional 
  args = parser.parse_args()
  with open(args.analysisFile, 'rb') as fp:
    analysisDict = pickle.loads(zlib.decompress(fp.read()))
  if args.fitIterationsFile != '':
    with open(args.fitIterationsFile, 'rb') as fp:
      fitIterationDict = pickle.loads(zlib.decompress(fp.read()))
  for x in analysisDict['checks']:
    print x, analysisDict['checks'][x]
  
  pass

def printFinal():
  """docstring for printFinal"""
  for x in fitIterationDict[fitIterationDict['iterationList'][-1]]['body']:
    print x  
  pass

if __name__ == '__main__':
  main()

