#!/usr/bin/env python
# fort18analysis.py
# 
# For use with my AstroTools scripts. Parses the body part of a fort.18 file
# and checks for various problems.
# 
# Copyright 2012 Jonathan Whitmore 
# Distributed under the Boost Software License, Version 1.0.
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated
# by a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND
# NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
# DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY,
# WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# 

import sys
import re
import string
import heapq
import numpy as np
import cPickle as pickle
import argparse
import zlib

def main():
  """
  Runs the inFile through a series of checks to test if anything 
  bad has happened during the fit. 
  """
  analysisDict = {}
  fitIterationDict = {}
  fitFinished = False
  iterationList = []
  region = 0
  analysisDict['region'] = {}
  analysisDict['finalFit'] = []
  analysisDict['fitType'] = [] 
  analysisDict['vchunkFit'] = [] 
  analysisDict['warnings'] = []
  analysisDict['finalIteration'] = []
  analysisDict['checks'] = {}
  topN = 10
  columnNames = ["Species", "z_val", "z_err", "b_val", "b_err", "N_val", "N_err", "da_val", "da_err"]
  AICcheck = []
  chiSquarecheck = []
  parser = argparse.ArgumentParser(description='Parse.')
  parser.add_argument('inFile', action="store", nargs='?', default='fort.18', type=str) # Positional 
  parser.add_argument('outFileStem', action="store", nargs='?', default='test.analysis.p', type=str) # Positional 
  args = parser.parse_args()
  with open(args.inFile, 'r') as f18:
    analysisDict['inFile'] = args.inFile
    lineCOUNT = 0
    for line in f18.read().splitlines():
      lineCOUNT += 1
      if re.search('iteration', line):
        iterationCOUNT = line.split()[2].zfill(3)
        startCOUNT = line.split()[4].zfill(2).strip('(,)')
        iterationList.append(startCOUNT+iterationCOUNT)
        analysisDict[iterationList[-1]] = {}
        fitIterationDict[iterationList[-1]] = {}
        fitIterationDict[iterationList[-1]]['body'] = []
      if re.search('rejected', line):
        analysisDict['warnings'].append([iterationList[-1], 'rejected'])
      if re.search('Hessian', line):
        analysisDict['warnings'].append([iterationList[-1], 'Hessian'])
      if re.search('iterations stopped early', line):
        analysisDict['warnings'].append([iterationList[-1], 'stopped early'])
      if re.search('chi-squared', line):
        analysisDict[iterationList[-1]]['chi-squared'] = float(line.split()[4].strip(','))
        analysisDict[iterationList[-1]]['DoF'] = float(line.split()[5])
        analysisDict[iterationList[-1]]['reduced-chi-square'] = \
            analysisDict[iterationList[-1]]['chi-squared']/analysisDict[iterationList[-1]]['DoF']
      if len(line.split()) == 10:
        fitIterationDict[iterationList[-1]]['body'].append(line)
      if re.search('statistics for whole fit', line):
        fitFinished = True
        finalIteration = iterationList[-1]
        # reset lineCOUNT so that the Npix can be parsed.
        lineCOUNT = 0 
      if fitFinished == True and lineCOUNT == 2:
        analysisDict['Npix'] = int(line.split()[3])
      # The following finds the errors printed in .13 format.
      if len(line.split()) == 9 and fitFinished == False:
        try:
          fitIterationDict[iterationList[-1]]['errors'].append(line)
        except:
          fitIterationDict[iterationList[-1]]['errors'] = []
          fitIterationDict[iterationList[-1]]['errors'].append(line)
      if len(line.split()) == 11 and line.split()[0] == ">>":
        analysisDict['vchunkFit'].append(np.array(line.split()))
      if len(line.split()) == 15 and line.split()[0] != ">>":
        analysisDict['finalFit'].append(np.array(line.split()))
      if len(line.split()) == 15 and re.search('qa', line):
        analysisDict['fitType'] = 'alphaFit'
        analysisDict['alpha'] = line.split()[7]
        analysisDict['alpha_err'] = line.split()[8]
      if re.search('Prob', line):
        region += 1
        analysisDict['region'][region] = {}
        analysisDict['region'][region]['wav'] = [line.split()[0], line.split()[1]]
        analysisDict['region'][region]['chi-squared'] = float(line.split()[2])
        analysisDict['region'][region]['Npix'] = float(line.split()[3])
        analysisDict['region'][region]['DoF'] = float(line.split()[4])
        analysisDict['region'][region]['reduced-chi-square'] = float(line.split()[2])/float(line.split()[4])
  # Reading through of inFile complete.
  analysisDict['finalIteration'] = analysisDict[finalIteration]
  fitIterationDict['iterationList'] = iterationList
  analysisDict['iterationList'] = iterationList
  analysisDict['finalIteration']['body'] = []
  iterationList.append('finalIteration')
  for line in fitIterationDict[finalIteration]['body']:
    p = re.compile('   0.00E\+00  ')
    analysisDict['finalIteration']['body'].append(p.sub('   1.00E+00  ', line))
  with open(args.outFileStem + '.finalbody.7', 'w') as fp:
    for line in analysisDict['finalIteration']['body']:
      print >>fp, line
  for x in iterationList:
    analysisDict[x]['Nparameters'] = analysisDict['Npix'] - analysisDict[x]['DoF']
    analysisDict[x]['AICc'] = AICc(analysisDict[x]['chi-squared'], analysisDict[x]['Nparameters'], analysisDict['Npix'])
    AICcheck.append(analysisDict[x]['AICc'])
    chiSquarecheck.append(analysisDict[x]['chi-squared'])
  testArray = np.column_stack(analysisDict['finalFit'])
  analyseArray = []
  for x, row in enumerate(testArray):
    analyseArray.append([])
    for y, element in enumerate(row):
      try:
        analyseArray[x].append(np.float(testArray[x][y]))
      except:
        analyseArray[x].append(testArray[x][y])
  # ["Species", "z_val", "z_err", "b_val", "b_err", "N_val", "N_err", "da_val", "da_err"]
  for column in [2, 3, 4, 6]: # largest b_val recorded as well
    indexes = [list(analyseArray[column]).index(x) for x in heapq.nlargest(topN, analyseArray[column])]
    analysisDict[columnNames[column]] = []
    for index in indexes:
      analysisDict[columnNames[column]].append([analysisDict['finalFit'][index][0], analysisDict['finalFit'][index][1][-2:], analysisDict['finalFit'][index][column]])
  if len(analysisDict['vchunkFit']) > 0:
    analysisDict['fitType'] = 'vchunkFit'
  # smallest N value
  # smallest b values
  # z values too close together
  # sanity checks that AICc and chi-squared are improving each iteration.
  if AICcheck == sorted(AICcheck, reverse=True):
    analysisDict['checks']['AICc'] = True
  else:
    analysisDict['checks']['AICc'] = False
  if chiSquarecheck == sorted(chiSquarecheck, reverse=True):
    analysisDict['checks']['chiSquarecheck'] = True
  else:
    analysisDict['checks']['chiSquarecheck'] = False
  with open(args.outFileStem + '.analysis.p.gz', 'wb') as fp:
    fp.write(zlib.compress(pickle.dumps(analysisDict, pickle.HIGHEST_PROTOCOL),9))
  with open(args.outFileStem + '.iterations.p.gz', 'wb') as fp:
    fp.write(zlib.compress(pickle.dumps(fitIterationDict, pickle.HIGHEST_PROTOCOL),9))
  pass

def AICc(chisquare, Nparameters, Npix):
  """Returns the AICc statistic for given inputs"""
  AICc = chisquare + 2.0 * Nparameters + (2.0 * Nparameters * (Nparameters + 1.0)) / (Npix - Nparameters - 1.0)
  return AICc

if __name__ == '__main__':
  main()

