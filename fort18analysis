#!/usr/bin/env python
# fort18analysis.py
# 
# For use with my AstroTools scripts. Parses the body part of a fort.18 file
# and checks for various problems.
# 
# Copyright 2012 Jonathan Whitmore 
# Distributed under the Boost Software License, Version 1.0.
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated
# by a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND
# NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
# DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY,
# WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# 

import sys
import re
import string
import heapq
import numpy as np

def main(inFile):
  """
  Runs the inFile through a series of checks to test if anything 
  bad has happened during the fit. 
  """
  # check (chi-sq and AICc? going down every iteration; error not "too big"; value not "too big")
  fort18Dict = {}
  fitFinished = False
  iterationList = []
  region = 0
  fort18Dict['region'] = {}
  fort18Dict['finalFit'] = []
  fort18Dict['velocityFit'] = []
  topN = 7
  columnNames = ["Species", "z_val", "z_err", "b_val", "b_err", "N_val", "N_err", "da_val", "da_err"]
  rejected = []
  hessian = []
  dropped = []
  with open(inFile, 'r') as f18:
    lineCOUNT = 0 
    for line in f18.read().splitlines():
      lineCOUNT += 1
      if re.search('iteration', line):
        iterationCOUNT = line.split()[2].zfill(3)
        startCOUNT = line.split()[4].zfill(2).strip('(,)')
        iterationList.append(startCOUNT+iterationCOUNT)
        fort18Dict[iterationList[-1]] = {}
        fort18Dict[iterationList[-1]]['body'] = []
        fort18Dict[iterationList[-1]]['errors'] = []
      if re.search('rejected', line):
        print "Rejected, iteration: ", iterationList[-1]
      if re.search('Hessian', line):
        print "Hessian, iteration: ", iterationList[-1]
      if re.search('iterations stopped early', line):
        print "stopped early, iteration: ", iterationList[-1]
      if re.search('chi-squared', line):
        fort18Dict[iterationList[-1]]['chi-squared'] = float(line.split()[4].strip(','))
        fort18Dict[iterationList[-1]]['DoF'] = float(line.split()[5])
        fort18Dict[iterationList[-1]]['reduced-chi-square'] = \
            fort18Dict[iterationList[-1]]['chi-squared']/fort18Dict[iterationList[-1]]['DoF']
      if len(line.split()) == 10:
        fort18Dict[iterationList[-1]]['body'].append(line)
      if re.search('statistics for whole fit', line):
        fitFinished = True
        lineCOUNT = 0 
      if fitFinished == True and lineCOUNT == 2:
        fort18Dict['Npix'] = int(line.split()[3])
      if len(line.split()) == 9 and fitFinished == False:
        fort18Dict[iterationList[-1]]['errors'].append(line)
      if len(line.split()) == 11 and line.split()[0] == ">>":
        fort18Dict['velocityFit'].append(np.array(line.split()))
      if len(line.split()) == 15 and line.split()[0] != ">>":
        fort18Dict['finalFit'].append(np.array(line.split()))
      if re.search('Prob', line):
        region += 1
        fort18Dict['region'][region] = {}
        fort18Dict['region'][region]['wav'] = [line.split()[0], line.split()[1]]
        fort18Dict['region'][region]['chi-squared'] = float(line.split()[2])
        fort18Dict['region'][region]['Npix'] = float(line.split()[3])
        fort18Dict['region'][region]['DoF'] = float(line.split()[4])
        fort18Dict['region'][region]['reduced-chi-square'] = float(line.split()[2])/float(line.split()[4])
        print fort18Dict['region'][region]['wav'], fort18Dict['region'][region]['reduced-chi-square']
  for x in iterationList:
    fort18Dict[x]['Nparameters'] = fort18Dict['Npix'] - fort18Dict[x]['DoF']
    fort18Dict[x]['AICc'] = AICc(fort18Dict[x]['chi-squared'], fort18Dict[x]['Nparameters'], fort18Dict['Npix'])  
  testArray = np.column_stack(fort18Dict['finalFit'])
  analyseArray = []
  for x, row in enumerate(testArray):
    analyseArray.append([])
    for y, element in enumerate(row):
      try:
        analyseArray[x].append(np.float(testArray[x][y]))
      except:
        analyseArray[x].append(testArray[x][y])
  for column in [2, 4, 6]:
    indexes = [list(analyseArray[column]).index(x) for x in heapq.nlargest(topN, analyseArray[column])]
    print "Top", topN, "errors in column:", columnNames[column]
    for index in indexes:
      print fort18Dict['finalFit'][index][0], fort18Dict['finalFit'][index][1][-2:], fort18Dict['finalFit'][index][column]
  if len(fort18Dict['velocityFit']) > 0:
    print "VELOCITY FIT"
  if int(iterationList[-1][-3:]) == 125:
    print "125 Iterations!"
  pass

def AICc(chisquare, Nparameters, Npix):
  """Returns the AICc statistic for given inputs"""
  AICc = chisquare + 2 * Nparameters + (2 * Nparameters * (Nparameters + 1)) / (Npix - Nparameters - 1)
  return AICc

if __name__ == '__main__':
  main(sys.argv[1])
