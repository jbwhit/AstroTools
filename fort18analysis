#!/usr/bin/env python
# fort18analysis.py
# 
# For use with my AstroTools scripts. Parses the body part of a fort.18 file
# and checks for various problems.
# 
# Copyright 2012 Jonathan Whitmore 
# Distributed under the Boost Software License, Version 1.0.
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated
# by a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND
# NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
# DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY,
# WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# 

import re
import string

def main(inFile):
  """
  Runs the inFile through a series of checks to test if anything 
  bad has happened during the fit. 
  """
  # check (chi-sq going down every iteration; error not "too big"; value not "too big")
  # TODO deal with: "iterations stopped early"
  # TODO what components were rejected, exactly
  iterationArray = []
  starts = []
  rejected = []
  hessian = []
  dropped = []
  flagDict['iterations125'] = False
  with open(inFile, 'r') as f18:
    for line in f18.read().splitlines():
      if re.search('iteration', line):
        iterationArray.append(line.split()[2].zfill(3))
        starts.append(line.split()[4])
      if re.search('rejected', line):
        rejected.append(line)
      if re.search('Hessian', line):
        hessian.append(line)
      if re.search('chi', line):
        chisqnu = float(line.split()[4][:-2]) / float(line.split()[5])
      if re.search('Parameter', line):
        "errors"
      if re.search('statistics', line):
        "Runs test"
      if re.search('Statistics for each region', line):
        "chi-squared"
        dropped.append(line)
  if int(max(set(starts))) >= 2:
    logging.warning("Initial fort.18 restarts: " + str(set(starts)))
  if int(iterationArray[-1]) == 125:
    flagDict['iterations125'] = True
    logging.info("125 iterations.")
  pass

if __name__ == '__main__':
  main()

# iteration   : 125 ( 1 )
# chi-squared :          1.203 (      1743.2677,  1449 ) 
# 
# FeII     11.03697     1.6904350aa    3.8394aa   0.00E+00QA      0.00   1.00E+00  0 !    1
# FeII     11.50949     1.6905446ab    8.8628ab   0.00E+00QA      0.00   1.00E+00  0 !    2
# FeII     10.89516     1.6907327ac    1.8581ac   0.00E+00QA      0.00   1.00E+00  0 !    3

# flag for early stop: 
# iterations stopped early

# flag for errors... 
# Parameter errors:
# FeII      0.15907     0.0000068aa    1.2993aa   0.00E+00QA      0.00   0.00E+00    !    1
# FeII      0.06288     0.0000083ab    1.2860ab   0.00E+00QA      0.00   0.00E+00    !    2
# FeII      0.13633     0.0000049ac    1.4027ac   0.00E+00QA      0.00   0.00E+00    !    3
# FeII      0.07085     0.0000026ad    0.5397ad   0.00E+00QA      0.00   0.00E+00    !    4

# parse this for dof; npix; chi-squared....
# statistics for whole fit:
#  Runs test  K-S test Chi-squared  Chans ndf   APr   Xp(.68) Xp(.95) Xp(.99)
#   0.00127   0.87939   1743.27    1609 1449   0.000 1473.91 1538.39 1576.62
# 
# Statistics for each region :
#     Start        End     Chi-squared  Chans df?
#     6409.98     6418.63    253.54     292  224   0.000 < Prob < 0.949 g= 0.085   1
#     6409.98    maxdev        0.3043              1.000   0.956   1.358   1.627
# 
#     6387.61     6396.15    401.33     289  221   0.000 < Prob < 0.000 g= 0.000   2
#     6387.61    maxdev        1.2886              0.072   0.956   1.358   1.627
# 
#     4327.10     4332.66    289.54     277  209   0.000 < Prob < 0.290 g= 0.000   3
#     4327.10    maxdev        0.3937              0.998   0.956   1.358   1.627
# 
#     4494.69     4500.58    218.86     283  217   0.000 < Prob < 0.998 g= 0.452   4
#     4494.69    maxdev        0.5043              0.961   0.956   1.358   1.627
# 
#     4989.40     4994.90    291.44     235  139   0.000 < Prob < 0.007 g= 0.000   5
#     4989.40    maxdev        0.8570              0.455   0.956   1.358   1.627
# 
#     5011.24     5016.72    283.48     233  137   0.000 < Prob < 0.013 g= 0.000   6
#     5011.24    maxdev        0.7735              0.588   0.956   1.358   1.627
# 
# FeII     1.6904350316aa  0.0000068158     3.83944aa    1.29934  11.036975    0.159073   0.0000E+00QA  0.0000E+00  0 [   0.000   0.000 1.000E+00 0.000E+00
# FeII     1.6905445912ab  0.0000083343     8.86282ab    1.28602  11.509485    0.062875   0.0000E+00QA  0.0000E+00  0 [   0.000   0.000 1.000E+00 0.000E+00
# FeII     1.6907326870ac  0.0000049217     1.85815ac    1.40274  10.895156    0.136328   0.0000E+00QA  0.0000E+00  0 [   0.000   0.000 1.000E+00 0.000E+00
