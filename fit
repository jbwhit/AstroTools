#!/bin/bash
# Copyright Jonathan Whitmore
# Distributed under the Boost Software License, Version 1.0.
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated
# by a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND
# NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
# DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY,
# WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# 

## ARGV flags and their explanations
## -- 1 fort.13 filename
## -- 2 fitting level (level 4 is the best fitting level; level 1 is the fastest)
## -- 3 which data to use: blind or unblind.
##

if [ "$1" == "--help" ]; then
  echo "ex: fit fort.13 --l2"
  exit
fi

TIMESTAMP=$(date +%Y.%m.%d.%H.%M.%S)
export VPFSETUP=/nfs/cluster/qso/jwhitmore/fits/setup/vp_setup.dat
if [ "$4" == "--isotope" ]; then
  echo "ISOTOPE FITTING!"
  export ATOMDIR=/nfs/cluster/qso/jwhitmore/fits/setup/MM_VPFIT_2012-06-05.dat
else
  export ATOMDIR=/nfs/cluster/qso/jwhitmore/fits/setup/MM_VPFIT_2012-06-05_noiso.dat
fi
export VPFPLOTS=/nfs/cluster/qso/jwhitmore/fits/setup/vp_splot.dat

if [ "$3" == "--unblind" ]; then
  echo "Using the unblinded data."
  export DATAFILE=/nfs/cluster/qso/jwhitmore/fits/UVES/185.A-0745/J222006-280323/unblinded/he2217m2818.fits
elif [ "$3" == "--P169" ]; then
  echo "Using Paolo's data; 1.69 system."
  export DATAFILE=/nfs/cluster/qso/jwhitmore/fits/UVES/185.A-0745/J222006-280323/paoloandmiriam/norAq2217.dat
elif [ "$3" == "--P162" ]; then
  echo "Using Paolo's data; 1.62 system."
  export DATAFILE=/nfs/cluster/qso/jwhitmore/fits/UVES/185.A-0745/J222006-280323/paoloandmiriam/norBq2217.dat
elif [ "$3" == "--P155" ]; then
  echo "Using Paolo's data; 1.55 system."
  export DATAFILE=/nfs/cluster/qso/jwhitmore/fits/UVES/185.A-0745/J222006-280323/paoloandmiriam/norCq2217.dat
elif [ "$3" == "--laptop" ]; then
  echo "Laptop. Data from current directory"
  export DATAFILE=../he2217m2818.fits # sets data file from starting directory
  echo $DATAFILE
elif [ "$3" == "--laptopP169" ]; then
  echo "Laptop Paolo's data. Data from current directory"
  export DATAFILE=../norAq2217.dat # sets data file from starting directory
  echo $DATAFILE
else
  echo "Using the BLIND data."
  export DATAFILE=/nfs/cluster/qso/jwhitmore/fits/UVES/185.A-0745/J222006-280323/J222006-280323.fits
fi

echo "Here's your chance to stop things before we create the directory. "
sleep 2

# consider running the fit in a screen session named after the TIMESTAMP (so screen -r $TIMESTAMP) brings that about
# then immediately dropping into a "comment.txt" in the fitting directory so that comments to that run can be added.
# Would have to be sure that the screen program inherited all of the proper environment variables, etc.

mkdir $TIMESTAMP
cd $TIMESTAMP

ln -s $DATAFILE .

# fit fort.13 --l4 --laptop 
if [ "$3" == "--laptop" ]; then
  cp ../MM_VPFIT_2012-06-05_noiso.dat .
  ln -s MM_VPFIT_2012-06-05_noiso.dat atom.dat
  export ATOMDIR=atom.dat
  cp ../vp_setup.dat .
  export VPFSETUP=vp_setup.dat
  cp ../vp_splot.dat .
  export VPFPLOTS=vp_splot.dat
elif [ "$3" == "--laptopP169" ]; then
  cp ../MM_VPFIT_2012-06-05_noiso.dat .
  ln -s MM_VPFIT_2012-06-05_noiso.dat atom.dat
  export ATOMDIR=atom.dat
  cp ../vp_setup.dat .
  export VPFSETUP=vp_setup.dat
  echo "changing VPFSETUP: ", $VPFSETUP
  cp ../vp_splot.dat .
  export VPFPLOTS=vp_splot.dat
  echo "changing VPFPLOTS: ", $VPFPLOTS
fi
export VPFPLOTS=/nfs/cluster/qso/jwhitmore/fits/setup/vp_splot.dat

cp ../$1 input.fort.13

# Auto-include bump w/ flag to turn off?
sed 's/ 0.5000/ 0.6250/g' input.fort.13 > bump.13 

diff input.fort.13 bump.13

echo $PWD

# Split file into file header and model portions.
# csplit -s [suppress bytesize output] filename '%throw away until this expression%' '/split file at this expression/'
# On mac you need a ! on the top line for this csplit to work.
csplit -s bump.13 '%^   \*%' '/^  \*/1'
# This outputs two files: xx00, xx01
mv xx00 head.13
mv xx01 body.13
# catch if errors out!

# python attempt to parse bump.13: 
# input = open('fort.13', 'r').read().split('\n')
# beginhead = False
# beginbody = False
# for line in input:
#   if line.startswith('   *'):
#     beginhead = True
#   if beginhead == True:
#     print "head: ", line
#   if beginbody == True:
#     print "body: ", line
#   if line.startswith('  *'):
#     beginhead = False
#     beginbody = True



cat head.13 body.13 > fort.13 # This writes fort.13.

if [ "$2" == "--fine" ]; then
  echo "Wrong choice"
  exit
elif [ "$2" == "--paolo" ]; then
  FITTINGPARAMETERS="f\nil\ncs\n5.e-7 50.0 5.e-7\nn\n0.003\nb\n0.02\nz\n1.e-6\nx4\n5.e-7\n\n\nfort.13\nn\nn\n\n"
  echo "paolo" >> fit.log
elif [ "$2" == "--l1" ]; then
  FITTINGPARAMETERS="f\nil\ncs\n2.e-4 100.0 2.e-4\nn\n0.01 \nb\n0.2 \nz\n2.e-6\nx4\n5.e-6\n\n\nfort.13\nn\nn\n\n"
  echo "l1" >> fit.log
elif [ "$2" == "--l2" ]; then
  FITTINGPARAMETERS="f\nil\ncs\n2.e-5 100.0 2.e-5\nn\n0.005\nb\n0.1 \nz\n2.e-7\nx4\n5.e-6\n\n\nfort.13\nn\nn\n\n"
  echo "l2" >> fit.log
elif [ "$2" == "--l3" ]; then
  FITTINGPARAMETERS="f\nil\ncs\n2.e-6 100.0 2.e-6\nn\n0.002\nb\n0.05\nz\n2.e-7\nx4\n5.e-7\n\n\nfort.13\nn\nn\n\n"
  echo "l3" >> fit.log
elif [ "$2" == "--l4" ]; then
  FITTINGPARAMETERS="f\nil\ncs\n2.e-7 100.0 2.e-7\nn\n0.002\nb\n0.05\nz\n2.e-7\nx4\n5.e-7\n\n\nfort.13\nn\nn\n\n"
  echo "l4" >> fit.log
else
  echo "You must specify a step-size level (--l[1-4]) with level 4 being the finest fit."
fi

# TODO copy exact setup and atom.dat files to fitting directory.

echo "! Setup file used:    $VPFSETUP" > fit.command
echo "! atom.dat file used: $ATOMDIR" >> fit.command
echo "! Fitting parameters: $FITTINGPARAMETERS" >> fit.command

cat fit.command fort.13 > command.fort.13

# Automatically parses the body of the body.13 for any anomalies.
fort13flagcheck

echo $ATOMDIR
echo $VPFSETUP

echo "Last check."
sleep 2

# TODO include vpfit version in log file.

printf "$FITTINGPARAMETERS" | vpfit95

echo $PWD
# stop over-writing and deleting files.
cat fit.command fort.26 > command.fort.26

combine2613 fort.13 fort.26 temp.fit
cat fit.command temp.fit > temp
cp temp fit.13 

grep 'BAD' fort.26 
grep 'dropped' fort.18 
echo $TIMESTAMP

# echo "iter;  chisq;    Npix;   DoF; Ndropped; Filename; level; alpha-fit"
awk '/Stat/{printf("%3i  %3.7f %6i %6i %6i     %s \n"), $3, $4, $5, $6, $8, "'$TIMESTAMP'" "/" FILENAME}' fit.13 | paste - fit.log > temp
awk '/qa/{print "alpha"}' fit.13 | paste temp - > summary.txt

cp fit.13 ..

# TODO parse the fort.13 and fit.13 files and report any discrepancies. 

printf "{fb,2}\npdf/\nq\n" | fitcmp ../vpfit -n fit.13 -o fort.13

cd ..

# Create pdf of full velocity plot.

# TODO find some way to parse things that won't change (fit results, time, date) plus things
# that might change (comment on run, comment on something strange).