#!/usr/bin/env python
# fort13flagcheck.py
# 
# For use with my AstroTools scripts. Parses the body part of a fort.13 file
# for any flag problems that I could think of: UPPERcase without a 
# corresponding lowercase flag; too many lowercase flags; etc.
# 
# Copyright 2012 Jonathan Whitmore 
# Distributed under the Boost Software License, Version 1.0.
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated
# by a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND
# NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
# DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY,
# WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# 

# checks the file "body.13" for component flag errors

import re
import string

fileparse=[]
with open('body.13') as infile:
  for line in infile: 
    fileparse.append(line)

# indexList
speciesIndex = 0
NIndex = 1
zIndex = 2
bIndex = 3
qIndex = 4
zeroIndex = 5
temperatureIndex = 6

nUpperCase = []
nLowerCase = []
zLowerCase = []
zUpperCase = []
bLowerCase = []
bUpperCase = []
qLowerCase = []
qUpperCase = []

for x in fileparse:
  if not x.strip().startswith('!'):
    # TODO add trys before all of these.
    if x.split()[zIndex][-2].isupper():
      zUpperCase.append(x.split()[zIndex][-2] + x.split()[zIndex][-1])
    if x.split()[zIndex][-2].islower():
      zLowerCase.append(x.split()[zIndex][-2] + x.split()[zIndex][-1])
    if x.split()[bIndex][-2].isupper():
      bUpperCase.append(x.split()[bIndex][-2] + x.split()[bIndex][-1])
    if x.split()[bIndex][-2].islower():
      bLowerCase.append(x.split()[bIndex][-2] + x.split()[bIndex][-1])
    if x.split()[qIndex][-2].isupper():
      qUpperCase.append(x.split()[qIndex][-2] + x.split()[qIndex][-1])
    if x.split()[qIndex][-2].islower():
      qLowerCase.append(x.split()[qIndex][-2] + x.split()[qIndex][-1])

def appendString(chunk, dictionary):
  """docstring for appendString"""
  if chunk[-2].isalpha():
    if chunk[-2].isupper():
    elif chunk[-2].islower():
  elif chunk[-1].isalpha():
    if chunk[-1].isupper():
    elif chunk[-1].islower():
  pass

# Get the unique upper and lowercase sets for each flag used.
zUpperSet = set(zUpperCase)
zLowerSet = set(zLowerCase)
bUpperSet = set(bUpperCase)
bLowerSet = set(bLowerCase)
qUpperSet = set(qUpperCase)
qLowerSet = set(qLowerCase)

# Include n-values and q values?
errorString = "\n\n\n =================== \n  = SERIOUS ERROR =  \n =================== \n\n\n"


# Check if too many "master" flags being fit.
if len(zLowerCase) != len(zLowerSet):
  print errorString
  print "   TOO MANY LOWERCASE FLAGS in z-values. "

if len(bLowerCase) != len(bLowerSet):
  print errorString
  print "   TOO MANY LOWERCASE FLAGS in b-values. "

if len(qLowerCase) != len(qLowerSet):
  print errorString
  print "   TOO MANY LOWERCASE FLAGS in ALPHA. "

# Check if there are fixed flags without corresponding master flags.
if len(zUpperSet.difference([x.upper() for x in zLowerSet])) > 0:
  print errorString
  print "   There are", len(zUpperSet.difference([x.upper() for x in zLowerSet])), "z-values that are fixed and not allowed to vary."
  print "   Flags:", 
  for upperproblem in zUpperSet.difference([x.upper() for x in zLowerSet]):
    print upperproblem,
  print

if len(bUpperSet.difference([x.upper() for x in bLowerSet])) > 0:
  print errorString
  print "   There are", len(bUpperSet.difference([x.upper() for x in bLowerSet])), "b-values that are fixed and not allowed to vary."
  print "   Flags:", 
  for upperproblem in bUpperSet.difference([x.upper() for x in bLowerSet]):
    print upperproblem,
  print

if len(qUpperSet.difference([x.upper() for x in qLowerSet])) == 0:
  print "\n\n"
  print " =================== "
  print "  Fitting for alpha! "
  print " =================== "
  print "\n\n"
if len(qUpperSet.difference([x.upper() for x in qLowerSet])) == 1:
  print "\n\n   alpha == zero.\n\n"
if len(qUpperSet.difference([x.upper() for x in qLowerSet])) > 1:
  print errorString
  print "   There are", len(qUpperSet.difference([x.upper() for x in qLowerSet])), "q-values that are fixed and not allowed to vary."
  print "   Flags:", 
  for upperproblem in qUpperSet.difference([x.upper() for x in qLowerSet]):
    print upperproblem,
  print

