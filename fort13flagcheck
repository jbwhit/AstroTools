#!/usr/bin/env python
# fort13flagcheck.py
# 
# For use with my AstroTools scripts. Parses the body part of a fort.13 file
# for any flag problems that I could think of: UPPERcase without a 
# corresponding lowercase flag; too many lowercase flags; etc.
# 
# Copyright 2012 Jonathan Whitmore 
# Distributed under the Boost Software License, Version 1.0.
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated
# by a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND
# NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
# DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY,
# WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# 

# checks the file "body.7" for component flag errors

import re
import string

fileparse=[]
with open('body.7') as infile:
  for line in infile:
    if (not line.strip().startswith('!') and (not line.strip().startswith('%')) and (line.strip() != '')):
    fileparse.append(line.split())

indexDict = {}
indexDict['species'] = {} 
indexDict['N'] = {} 
indexDict['z'] = {} 
indexDict['b'] = {} 
indexDict['q'] = {} 
indexDict['zero'] = {} 
indexDict['temp'] = {} 

indexDict['species']['index'] = 0
indexDict['N']['index'] = 1
indexDict['z']['index'] = 2
indexDict['b']['index'] = 3
indexDict['q']['index'] = 4
indexDict['zero']['index'] = 5
indexDict['temp']['index'] = 6

for label in ['N','z','b','q']:
  indexDict[label]['upper'] = []
  indexDict[label]['lower'] = []

for line in fileparse:
  for label in ['N','z','b','q']:
    try:
      if line[indexDict[label]['index']][-2].isupper():
        indexDict[label]['upper'].append(line[indexDict[label]['index']][-2] + line[indexDict[label]['index']][-1])
    except:
      pass
    try:
      if line[indexDict[label]['index']][-2].islower():
        indexDict[label]['lower'].append(line[indexDict[label]['index']][-2] + line[indexDict[label]['index']][-1])
    except:
      pass

# Get the unique upper and lowercase sets for each flag used.
for label in ['N','z','b','q']:
  indexDict[label]['upperSet'] = set(indexDict[label]['upper'])
  indexDict[label]['lowerSet'] = set(indexDict[label]['lower'])

warningString = "\n =================== \n  = WARNING =  \n =================== \n"

for label in ['N','z','b','q']:
  if len(indexDict[label]['lower']) != len(indexDict[label]['lowerSet']):
    print warningString
    print "Too many lowercase flags warning: ", label
  temp = indexDict[label]['upperSet'].difference([x.upper() for x in indexDict[label]['lower']])
  if (label != 'q') and (len(temp) > 0):
    print warningString
    print "There are: ", len(temp), label, "fixed values."
    for upperproblem in temp:
      print upperproblem,
    print
  elif (label == 'q') and len(temp) == 0:
    print "Fitting for alpha."
  elif (label == 'q') and len(temp) == 1:
    print "alpha fixed at zero"
  elif (label == 'q') and len(temp) > 1:
    print warningString, warningString, warningString
    print "Fitting more than 1 alpha value!"
    print warningString, warningString, warningString