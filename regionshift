#!/usr/bin/env python
# regionshift
# 
# For use with my AstroTools scripts. 
# Parses the body part of a fort.13 file
# does various operations that are tedious by hand
# 
# Copyright 2012 Jonathan Whitmore 
# Distributed under the Boost Software License, Version 1.0.
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated
# by a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND
# NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
# DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY,
# WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# 

import sys
import re
import string
import numpy as np
import argparse
import itertools 
        
def main():
    """docstring for main"""
    parser = argparse.ArgumentParser(description='Parse.')
    parser.add_argument('analysisFile', action="store", nargs='?', default='1fort.13', type=str) # Positional 
    parser.add_argument('--linear', action="store", nargs=2, help="slope, offset") # Positional
    parser.add_argument('--quadratic', action="store", nargs=3, help="quad, slope, offset") # Positional
    parser.add_argument('--split_linear', action="store", nargs=5, help="breakpoint, slope, offset, slope2, offset2") # Positional
    args = parser.parse_args()
    
    head = []
    body = []

    with open(args.analysisFile, 'r') as file_handle:
        guts = file_handle.read().splitlines()
        
    begin_head = False
    begin_body = False        
    for line in guts:
        if begin_body == True:
            body.append(line)
        if line.startswith('  *'):
            begin_body = True
            begin_head = False
        if begin_head == True:
            head.append(line.split())
        if line.startswith('   *'):
            begin_head = True
    print "! Added velocity shifts to fit regions via regionshift"
    print "! Starting fort13: ", args.analysisFile
    if args.linear:
        input_slope = float(args.linear[0])
        input_offset = float(args.linear[1])
        print "! linear: vshift = slope * wavelength + offset"
        print "! slope: ", input_slope
        print "! offset: ", input_offset
        print_head(head)
        print_linear(head, input_slope=input_slope, input_offset=input_offset)
    elif args.quadratic:
        input_quad = float(args.quadratic[0])
        input_slope = float(args.quadratic[1])
        input_offset = float(args.quadratic[2])
        print "! quadratic: vshift = quad * wavelength ** 2 + slope * wavelength + offset"
        print "! quad: ", input_quad
        print "! slope: ", input_slope
        print "! offset: ", input_offset
        print_head(head)
        print_quadratic(head, input_quad, input_slope, input_offset)
    elif args.split_linear:
        breakpoint = float(args.split_linear[0])
        input_slope = float(args.split_linear[1])
        input_offset = float(args.split_linear[2])
        input_slope2 = float(args.split_linear[3])
        input_offset2 = float(args.split_linear[4])
        print "! split_linear: "
        print "! if wavelength < breakpoint: vshift = slope * wavelength + offset"
        print "! else: vshift = slope2 * wavelength + offset2"
        print "! breakpoint: ", breakpoint
        print "! slope: ", input_slope
        print "! offset: ", input_offset
        print "! slope2: ", input_slope2
        print "! offset2: ", input_offset2
        print_head(head)
        print_split_linear(head, breakpoint, input_slope, input_offset, input_slope2, input_offset2)
    else:
        print_head(head)
    print_body(body)
    pass
    
def print_quadratic(in_list, input_quad, input_slope, input_offset):
    """docstring for print_quadratic"""
    for line in in_list:
        wavelength_midpoint = np.average([float(line[2]), float(line[3])])
        redshift = wavelength_midpoint / 1215.6701 - 1.0
        print "  >>   1.00000SN ", str(round(redshift, 6)) + "SZ", str(round(quadratic(wavelength_midpoint, quad=input_quad, slope=input_slope, offset=input_offset), 6)) + "SZ   0.00E+00QS      0.00   1.00E+00  0 !"
    pass

    
def print_linear(in_list, input_slope, input_offset):
    """docstring for print_linear"""
    for line in in_list:
        wavelength_midpoint = np.average([float(line[2]), float(line[3])])
        redshift = wavelength_midpoint / 1215.6701 - 1.0
        print "  >>   1.00000SN ", str(round(redshift, 6)) + "SZ", str(round(linear(wavelength_midpoint, slope=input_slope, offset=input_offset), 6)) + "SZ   0.00E+00QS      0.00   1.00E+00  0 !"
    pass
    
def print_split_linear(in_list, breakpoint, input_slope, input_offset, input_slope2, input_offset2):
    """returns a distorted wavelength scale with a breakpoint"""
    for line in in_list:
        wavelength_midpoint = np.average([float(line[2]), float(line[3])])
        redshift = wavelength_midpoint / 1215.6701 - 1.0
        if wavelength_midpoint < breakpoint:
            print "  >>   1.00000SN ", str(round(redshift, 6)) + "SZ", str(round(linear(wavelength_midpoint, slope=input_slope, offset=input_offset), 6)) + "SZ   0.00E+00QS      0.00   1.00E+00  0 !"
        else:
            print "  >>   1.00000SN ", str(round(redshift, 6)) + "SZ", str(round(linear(wavelength_midpoint, slope=input_slope2, offset=input_offset2), 6)) + "SZ   0.00E+00QS      0.00   1.00E+00  0 !"
    pass

def linear(wavelength, slope=.3497, offset=-1218.0):
    """Function in form of m/s/Angstrom -- returns km/s """
    return (wavelength * slope + offset) / 1000.0
        
def quadratic(wavelength, quad=-0.0001476, slope=1.1782, offset=-2022.0):
    """Function in form of m/s/Angstrom -- returns km/s """
    f1 = quad
    f2 = slope
    f3 = offset
    return (f1 * wavelength ** 2 + f2 * wavelength + f3) / 1000.0
        
def print_head(in_list):
    """docstring for print_head"""
    print '   *'
    for row in in_list:
        print ' '.join(row)
    print '  *'    
    pass

def print_body(in_list):
    """docstring for print_body"""
    for line in in_list:
        print line
    pass

if __name__ == '__main__':
    main()