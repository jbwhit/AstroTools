#!/usr/bin/env python
# pyfit.py
# 
# Copyright 2012 Jonathan Whitmore 
# Distributed under the Boost Software License, Version 1.0.
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated
# by a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND
# NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
# DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY,
# WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# 
import os
import re
import shutil
import argparse
from ConfigParser import ConfigParser
import shlex
import datetime 
import time 
import pprint
import glob
import logging
import readline
import subprocess as subprocess
import difflib

pauseTime = 2
TIMESTAMP = datetime.datetime.now().strftime("%Y.%m.%d.%H.%M.%S")
print TIMESTAMP

# Parse command line arguments
parser = argparse.ArgumentParser(description='This is a program that runs vpfit with defined parameters.')
parser.add_argument('input13', action="store", default='fort.13', type=str) # Positional (feed in the fort.13-formatted file).
parser.add_argument('--continue', action="store_true", default=False, help='Set continue to true.')
parser.add_argument('--nobump', action="store_true", default=False, help='Turn off bump the initial min values.')
parser.add_argument('--vpfit', action="store", dest="vpfitVersion", default='9.5', type=str, help='Which version of vpfit to use.')
parser.add_argument('--parameterString', choices=('L1', 'L2', 'L3', 'L4', 'L5'), default='L5', 
                    help='The VPFIT parameter step sizes to use.')
parser.add_argument('--dataFile', choices=('blind', 'unblind', 'P169', 'P162', 'P155', 'laptop', 'laptopP169'), default='blind', 
                    help='data file to use.')
parser.add_argument('--fitSetupDirectory', dest="fitSetupDirectory", default='notSet', help='Location of atom.dat, vp_setup.dat, etc.')
parser.add_argument('--isotope', action="store_true", default=False, help='Use the isotope atom.dat')
parser.add_argument('--version', action='version', version='%(prog)s 0.01')

args = parser.parse_args()

# print args.vpfitVersion

if args.isotope == True:
  print "FITTING FOR ISOTOPES"
  os.environ['ATOMDIR'] = '/nfs/cluster/qso/jwhitmore/fits/setup/MM_VPFIT_2012-06-05.dat'
else:
  # os.environ['ATOMDIR'] = '/nfs/cluster/qso/jwhitmore/fits/setup/MM_VPFIT_2012-06-05_noiso.dat'
os.environ['VPFPLOTS'] = '/nfs/cluster/qso/jwhitmore/fits/setup/vp_splot.dat'

print "You have %d seconds to stop things if there's a problem... " % pauseTime
time.sleep(pauseTime)

os.makedirs(TIMESTAMP)
parentDirectory = os.getcwd() + '/'
os.chdir(TIMESTAMP)
fitDirectory = os.getcwd() + '/'

print TIMESTAMP

# TODO implement ConfigParser for local atom.dat; data path; 
if args.dataFile == 'unblind':
  DATAFILE = '/nfs/cluster/qso/jwhitmore/fits/UVES/185.A-0745/J222006-280323/unblinded/he2217m2818.fits'
if args.dataFile == 'P169':
  DATAFILE = '/nfs/cluster/qso/jwhitmore/fits/UVES/185.A-0745/J222006-280323/paoloandmiriam/norAq2217.dat'
if args.dataFile == 'P162':
  DATAFILE = '/nfs/cluster/qso/jwhitmore/fits/UVES/185.A-0745/J222006-280323/paoloandmiriam/norBq2217.dat'
if args.dataFile == 'P155':
  DATAFILE = '/nfs/cluster/qso/jwhitmore/fits/UVES/185.A-0745/J222006-280323/paoloandmiriam/norCq2217.dat'
if args.dataFile == 'laptop':
  DATAFILE = '../he2217m2818.fits'
  #   cp ../MM_VPFIT_2012-06-05_noiso.dat .
  shutil.copy('../MM_VPFIT_2012-06-05_noiso.dat', fitDirectory)
  #   ln -s MM_VPFIT_2012-06-05_noiso.dat atom.dat
  os.symlink('MM_VPFIT_2012-06-05_noiso.dat', 'atom.dat') # create symbolic link to atom.dat 
  #   cp ../vp_setup.dat .
  shutil.copy('../vp_setup.dat', fitDirectory)
  #   export VPFSETUP=vp_setup.dat
if args.dataFile == 'laptopP169':
  DATAFILE = '../norAq2217.dat'
  #   cp ../MM_VPFIT_2012-06-05_noiso.dat .
  #   ln -s MM_VPFIT_2012-06-05_noiso.dat atom.dat
  #   export ATOMDIR=atom.dat
  #   cp ../vp_setup.dat .
  #   export VPFSETUP=vp_setup.dat
  #   echo "changing VPFSETUP: ", $VPFSETUP
  #   cp ../vp_splot.dat .
  #   export VPFPLOTS=vp_splot.dat
  #   echo "changing VPFPLOTS: ", $VPFPLOTS

# Setup Directory has atom.dat, vp_setup.dat, vp_splot.dat.
# Data directory (?) has all various data files in it. Unsure of this idea.

print os.environ['ATOMDIR'] # will show what's stored here. 

if args.dataFile == 'blind':
  DATAFILE = '/nfs/cluster/qso/jwhitmore/fits/UVES/185.A-0745/J222006-280323/J222006-280323.fits'
  
# # # consider running the fit in a screen session named after the TIMESTAMP (so screen -r $TIMESTAMP) brings that about
# # # then immediately dropping into a "comment.txt" in the fitting directory so that comments to that run can be added.
# # # Would have to be sure that the screen program inherited all of the proper environment variables, etc.
# bigspectrahandle.write(open(chunk + ".ascii").read())
# dirpath = tempfile.mkdtemp()  # make temporary directory

os.symlink(DATAFILE, DATAFILE.split('/')[-1]) # create symbolic link from the location of the DATAFILE to cwd.

# temp
print args.input13
print parentDirectory + args.input13
print fitDirectory + "input.fort.13"
shutil.copy(parentDirectory + args.input13, fitDirectory + "input.fort.13")

# Have a config file for different computers with locations
# of atom.dat, vp_setup.dat, vp_splot.dat, datafile, etc. 
config = ConfigParser()
config.read('argparse_witH_shlex.ini')
config_value = config.get('cli', 'options')
print 'Config  :', config_value

# Log QSO name
# Log absorber system (1.62, etc.)

argument_list = shlex.split(config_value)
print 'Arg List:', argument_list

# shutil.rmtree(dirpath)  # delete temp directory -rf
# temp1 = open(vpfitcontol,'r')
# temp2 = open(vpfitLog,'w')
# p1 = call(['vpfit'], stdin=temp1, stdout=temp2) # waits for command to complete (do one that doesn't wait).
# temp1.close()
# temp2.close()

startTime = datetime.datetime.now()

# Change to use current directory settings. 
os.environ['ATOMDIR'] = 'atom.dat'
os.environ['VPFSETUP'] = 'vp_setup.dat'
os.environ['VPFPLOTS'] = 'vp_splot.dat'


p = subprocess.Popen(["vpfit95", "arg1"])
# do other stuff here
# at the end wait for the program to exit
returncode = p.wait()
# run final step here
# subprocess.Popen.poll() # Check if process has finished or not. (For parsing output).
# End-run analysis should be a separate program so can be rerun separately. ?
endTime = datetime.datetime.now()
runningTime = endTime - startTime
print "Running time:", runningTime.__str__()
# Log this.

shutil.copy(args.input13, fitDirectory + "input.fort.13")

# # Auto-include bump w/ flag to turn off?
if args.nobump:
  # copy bump.13
  shutil.copy('input.fort.13', fitDirectory + 'bump.13')
else:
  with open('input.fort.13', 'r') as sources:
    lines = sources.readlines()
  with open('bump.13', 'w') as bumpFile:
    for line in lines:
      sources.write(re.sub(r' 0.5000', ' 0.6250', line))

# diff input.fort.13 bump.13
d = difflib.Differ()
diff = d.compare('input.fort.13', 'bump.13')
print '\n'.join(diff)

# # Split file into file header and model portions.
inputHandle = open('input.fort.13', 'r').read().split('\n')
beginhead = False
beginbody = False
try: 
  with open('head.13', 'w') as head, open('body.13', 'w') as body:
    for line in inputHandle:
      if (not line.startswith('!') and line.strip() != ''): # Ignore comments and empty lines.
        if line.startswith('   *'):
          beginhead = True
        if beginhead == True:
          print >>head, line
        if beginbody == True:
          print >>body, line
        if line.startswith('  *'):
          beginhead = False
          beginbody = True
except: 
  print "Splitting the input file failed. "

# cat head.13 body.13 > fort.13 # This writes fort.13.
with open('head.13','r') as head, open('body.13','r') as body:
  with open('fort.13', 'w') as fort13:
    for line in head.read().split('\n'):
      if line.strip() != '':
        print >>fort13, line
    for line in body.read().split('\n'):
      if line.strip() != '':
        print >>fort13, line


if args.parameterString == "paolo":
  FITTINGPARAMETERS="f\nil\ncs\n5.e-7 50.0 5.e-7\nn\n0.003\nb\n0.02\nz\n1.e-6\nx4\n5.e-7\n\n\nfort.13\nn\nn\n\n"
if args.parameterString == "L1":
  FITTINGPARAMETERS="f\nil\ncs\n2.e-4 100.0 2.e-4\nn\n0.01 \nb\n0.2 \nz\n2.e-6\nx4\n5.e-6\n\n\nfort.13\nn\nn\n\n"
if args.parameterString == "L2":
  FITTINGPARAMETERS="f\nil\ncs\n2.e-5 100.0 2.e-5\nn\n0.005\nb\n0.1 \nz\n2.e-7\nx4\n5.e-6\n\n\nfort.13\nn\nn\n\n"
if args.parameterString == "L3":
  FITTINGPARAMETERS="f\nil\ncs\n2.e-6 100.0 2.e-6\nn\n0.002\nb\n0.05\nz\n2.e-7\nx4\n5.e-7\n\n\nfort.13\nn\nn\n\n"
if args.parameterString == "L4":
  FITTINGPARAMETERS="f\nil\ncs\n2.e-7 100.0 2.e-7\nn\n0.002\nb\n0.05\nz\n2.e-7\nx4\n5.e-7\n\n\nfort.13\nn\nn\n\n"
if args.parameterString == "L5":
  FITTINGPARAMETERS="f\nil\ncs\n1.e-8 100.0 1.e-8\nn\n0.002\nb\n0.05\nz\n2.e-7\nx4\n5.e-7\n\n\nfort.13\nn\nn\n\n"

# echo "! Setup file used:    $VPFSETUP" > fit.command
# echo "! atom.dat file used: $ATOMDIR" >> fit.command
# echo "! Fitting parameters: $FITTINGPARAMETERS" >> fit.command

# cat fit.command fort.13 > command.fort.13

# # Automatically parses the body of the body.13 for any anomalies.
fort13flagcheck 

print "Last chance... "
time.sleep(pauseTime)

if args.vpfitVersion == "9.5":
  Popen.call(FITTINGPARAMETERS, vpfit95) # or something.
if args.vpfitVersion == "10.0":
  vpfit10

# cat fit.command fort.26 > command.fort.26
# 
# combine2613 fort.13 fort.26 temp.fit
# cat fit.command temp.fit > temp
# cp temp fit.13 
# 
# grep 'BAD' fort.26 
# grep 'dropped' fort.18 
# echo $TIMESTAMP
# 
# # echo "iter;  chisq;    Npix;   DoF; Ndropped; Filename; level; alpha-fit"
# awk '/Stat/{printf("%3i  %3.7f %6i %6i %6i     %s \n"), $3, $4, $5, $6, $8, "'$TIMESTAMP'" "/" FILENAME}' fit.13 | paste - fit.log > temp
# awk '/qa/{print "alpha"}' fit.13 | paste temp - > summary.txt
# 
# cp fit.13 ..
# 
# # TODO parse the fort.13 and fit.13 files and report any discrepancies. 
# 
# printf "{fb,2}\npdf/\nq\n" | fitcmp ../vpfit -n fit.13 -o fort.13
# 
# cd ..
# 
# # Create pdf of full velocity plot.
# 
# # TODO find some way to parse things that won't change (fit results, time, date) plus things
# # that might change (comment on run, comment on something strange).