#!/usr/bin/env python
# pyfit.py
# 
# The purpose of this program is to attempt to make fitting absorption systems 
# with vpfit reproducible, and easier. Several decisions were made that could
# be argued are steps in the wrong direction. Let me know if you have any better
# ideas or suggestions. (You can probably Google me and vpfit and find out my
# current information).
# 
# Copyright 2012 Jonathan Whitmore 
# Distributed under the Boost Software License, Version 1.0.
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated
# by a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND
# NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
# DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY,
# WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# 
import os
import re
import shutil
import argparse
import shlex
import datetime 
import time 
import pprint
import glob
import logging
import readline
import subprocess as subprocess
import difflib
from ConfigParser import SafeConfigParser
import simplejson as json

pauseTime = 2
TIMESTAMP = datetime.datetime.now().strftime("%Y.%m.%d.%H.%M.%S")
print TIMESTAMP

latestAtomdat = 'MM_VPFIT_2012-06-05.dat' # Update this. 

# Known limitations
# datafiles must not have spaces in their names. 

# Parse command line arguments
parser = argparse.ArgumentParser(description='Run vpfit with specified fitting parameters.')
parser.add_argument('input13', action="store", default='fort.13', type=str) # Positional (feed in the fort.13-formatted file).
parser.add_argument('--continue', action="store_true", default=False, help='Set continue to true.')
parser.add_argument('--nocomment', action="store_true", default=False, help='Turn off comment prompt.')
parser.add_argument('--donotuseconfigs', action="store_true", default=False, help='Will not use the config files.')
parser.add_argument('--nobump', action="store_true", default=False, help='Turn off bump the initial min values.')
parser.add_argument('--vpfit', action="store", dest="vpfitVersion", default='9.5', type=str, help='Which version of vpfit to use.')
parser.add_argument('--parameterString', choices=('L1', 'L2', 'L3', 'L4', 'L5'), default='L5', 
                    help='The VPFIT parameter step sizes to use.')
parser.add_argument('--dataFile', action="store", default='blind', help='data file to use.')
parser.add_argument('--fitSetupDirectory', dest="fitSetupDirectory", default='notSet', help='Location of atom.dat, vp_setup.dat, etc.')
parser.add_argument('--atomdat', choices=('isoAtomFile', 'atomFile'), default='atomFile', help='atom.dat choices')
parser.add_argument('--version', action='version', version='%(prog)s 0.01')

args = parser.parse_args()

  print "FITTING FOR ISOTOPES"
print "You have %d seconds to stop things if there's a problem... " % pauseTime
time.sleep(pauseTime)

os.makedirs(TIMESTAMP)
parentDirectory = os.getcwd() + '/'
os.chdir(TIMESTAMP)
fitDirectory = os.getcwd() + '/'

  shutil.copy('../MM_VPFIT_2012-06-05_noiso.dat', fitDirectory)
  #   cp ../vp_setup.dat .
  #   export VPFSETUP=vp_setup.dat
  DATAFILE = '../norAq2217.dat'
  #   export ATOMDIR=atom.dat
  #   export VPFSETUP=vp_setup.dat
  #   export VPFPLOTS=vp_splot.dat
# Create a fitting log. 
logging.basicConfig(filename=TIMESTAMP + '.log', level=logging.DEBUG)

if args.donotuseconfigs == True:
  print "Not using config files."
  print "Need to know locations of setup files and data files."
else:
  parser = SafeConfigParser()
  candidates = glob.glob(parentDirectory + 'config*')
  found = parser.read(candidates)
  print "Using these config files:"
  for configfile in set(found):
    print "  ", configfile
    logging.info("config loaded: " + configfile)
  setupDir = parser.get('machine', 'setupdir') + '/'
  atomDatFile = parser.get('update', args.atomdat)
  shutil.copy(setupDir + atomDatFile, fitDirectory)
  shutil.copy(setupDir + 'vp_setup.dat', fitDirectory)
  shutil.copy(setupDir + 'vp_splot.dat', fitDirectory)
  dataDirectory = parser.get('data', 'dataDirectory') + '/'
  os.symlink(atomDatFile, 'atom.dat') # create symbolic link to atom.dat in fitting directory.
  
shutil.copy(parentDirectory + args.input13, fitDirectory + "input.fort.13")

print 'Config  :', config_value


os.environ['VPFSETUP'] = 'vp_setup.dat'
returncode = p.wait()
runningTime = endTime - startTime
if args.input13 != "input.fort.13":
  shutil.copy(args.input13, fitDirectory + "input.fort.13")

# # Auto-include bump w/ flag to turn off?
if args.nobump:
  # copy bump.13
  shutil.copy('input.fort.13', fitDirectory + 'bump.13')
else:
  with open('input.fort.13', 'r') as sources:
    lines = sources.readlines()
  with open('bump.13', 'w') as bumpFile:
    for line in lines:
      sources.write(re.sub(r' 0.5000', ' 0.6250', line))

# diff input.fort.13 bump.13
d = difflib.Differ()
diff = d.compare('input.fort.13', 'bump.13')
print '\n'.join(diff)

# # Split file into file header and model portions.
inputHandle = open('input.fort.13', 'r').read().split('\n')
beginhead = False
beginbody = False
try: 
  with open('head.13', 'w') as head, open('body.13', 'w') as body:
    for line in inputHandle:
      if (not line.startswith('!') and line.strip() != ''): # Ignore comments and empty lines.
        if line.startswith('   *'):
          beginhead = True
        if beginhead == True:
          print >>head, line
        if beginbody == True:
          print >>body, line
        if line.startswith('  *'):
          beginhead = False
          beginbody = True
except: 
  print "Splitting the input file failed. "

# cat head.13 body.13 > fort.13 # This writes fort.13.
with open('head.13','r') as head, open('body.13','r') as body:
  with open('fort.13', 'w') as fort13:
    for line in head.read().split('\n'):
      if line.strip() != '':
        print >>fort13, line
    for line in body.read().split('\n'):
      if line.strip() != '':
        print >>fort13, line


if args.parameterString == "paolo":
  FITTINGPARAMETERS="f\nil\ncs\n5.e-7  50.0 5.e-7\nn\n0.003\nb\n0.02\nz\n1.e-6\nx4\n5.e-7\n\n\nfort.13\nn\nn\n\n"
if args.parameterString == "L1":
  FITTINGPARAMETERS="f\nil\ncs\n2.e-4 100.0 2.e-4\nn\n0.01 \nb\n0.2 \nz\n2.e-6\nx4\n5.e-6\n\n\nfort.13\nn\nn\n\n"
if args.parameterString == "L2":
  FITTINGPARAMETERS="f\nil\ncs\n2.e-5 100.0 2.e-5\nn\n0.005\nb\n0.1 \nz\n2.e-7\nx4\n5.e-6\n\n\nfort.13\nn\nn\n\n"
if args.parameterString == "L3":
  FITTINGPARAMETERS="f\nil\ncs\n2.e-6 100.0 2.e-6\nn\n0.002\nb\n0.05\nz\n2.e-7\nx4\n5.e-7\n\n\nfort.13\nn\nn\n\n"
if args.parameterString == "L4":
  FITTINGPARAMETERS="f\nil\ncs\n2.e-7 100.0 2.e-7\nn\n0.002\nb\n0.05\nz\n2.e-7\nx4\n5.e-7\n\n\nfort.13\nn\nn\n\n"
if args.parameterString == "L5":
  FITTINGPARAMETERS="f\nil\ncs\n1.e-8 100.0 1.e-8\nn\n0.002\nb\n0.05\nz\n2.e-7\nx4\n5.e-7\n\n\nfort.13\nn\nn\n\n"

# echo "! Setup file used:    $VPFSETUP" > fit.command
# echo "! atom.dat file used: $ATOMDIR" >> fit.command
# echo "! Fitting parameters: $FITTINGPARAMETERS" >> fit.command

# cat fit.command fort.13 > command.fort.13

# # Automatically parses the body of the body.13 for any anomalies.
fort13flagcheck 

print "Last chance... "
time.sleep(pauseTime)

if args.vpfitVersion == "9.5":
  Popen.call(FITTINGPARAMETERS, vpfit95) # or something.
if args.vpfitVersion == "10.0":
  vpfit10

# cat fit.command fort.26 > command.fort.26
# 
# combine2613 fort.13 fort.26 temp.fit
# cat fit.command temp.fit > temp
# cp temp fit.13 
# 
# grep 'BAD' fort.26 
# grep 'dropped' fort.18 
# echo $TIMESTAMP
# 
# # echo "iter;  chisq;    Npix;   DoF; Ndropped; Filename; level; alpha-fit"
# awk '/Stat/{printf("%3i  %3.7f %6i %6i %6i     %s \n"), $3, $4, $5, $6, $8, "'$TIMESTAMP'" "/" FILENAME}' fit.13 | paste - fit.log > temp
# awk '/qa/{print "alpha"}' fit.13 | paste temp - > summary.txt
# 
# cp fit.13 ..
# 
# # TODO parse the fort.13 and fit.13 files and report any discrepancies. 
# printf "{fb,2}\npdf/\nq\n" | fitcmp ../vpfit -n fit.13 -o fort.13
# # Create pdf of full velocity plot.
# # TODO find some way to parse things that won't change (fit results, time, date) plus things
