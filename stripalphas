#!/usr/bin/env python
# stripalphas
# 
# For use with my AstroTools scripts. 
# Takes input file and removes alphas (and redundant whitespace)
# 
# Copyright 2012 Jonathan Whitmore 
# Distributed under the Boost Software License, Version 1.0.
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated
# by a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND
# NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
# DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY,
# WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# 

import sys
import re
import string
import numpy as np
import argparse
import itertools 
        
def main():
    """docstring for main"""
    parser = argparse.ArgumentParser(description='Parse.')
    parser.add_argument('analysisFile', action="store", nargs='?', default='1fort.13', type=str) # Positional 
    # parser.add_argument('input_slope', action="store", nargs='?', default='0.23', type=str) # Positional 
    # parser.add_argument('input_offset', action="store", nargs='?', default='12.0', type=str) # Positional 
    args = parser.parse_args()

    with open(args.analysisFile, 'r') as file_handle:
        for tosplitline in file_handle.read().splitlines():
            for element in tosplitline.split():
                print ''.join(i for i in element if not i.isalpha()),
            print
    pass
        
def sort_master(key, linelist):
    """returns the sorted list of lines sorted by z"""
    for line in linelist:
        print line
    pass

if __name__ == '__main__':
    main()

