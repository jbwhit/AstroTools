#!/usr/bin/env python
# HARPS-to-fxb
"""This script converts the Pipeline-reduced HARPS data 
(usually has the name like: HARPS.2006-05-22T09.34.03.229_e2ds_A.fits).
into a format that is consistent with the UVES_popler -raw output.
"""
# 
# For use with my AstroTools scripts. 
# Parses the body part of a fort.18 analysis file
# and reports for various problems.
# 
# Copyright 2012 Jonathan Whitmore 
# Distributed under the Boost Software License, Version 1.0.
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated
# by a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND
# NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
# DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY,
# WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# 
import argparse
import pyfits as pf
import os
import os.path
import glob
import numpy as np

# Edlen (1966) formula: 
# $$(n(\lambda_{vac}) - 1)_s \times 10^8 = 8342.13 + \frac{2406030}{(130 - \sigma^2)} + \frac{15997}{(38.9 - \sigma^2)}$$
# Sigma is wavenumber in inverse $\mu m$, or: 
# $$\sigma \equiv \frac{10000}{\lambda_{\text{vac}}}$$
# when $\lambda$ is in Angstroms.
# n * air = vac

HARPS_BASELINE_ERROR = 5.0

# def edlen_n(wave):
#     sigma = 1.0e4 / wave
#     rightside = 8342.13 + 2406030.0 / (130.0 - sigma**2) + 15997.0 / (38.9 - sigma**2)
#     return rightside / 1.0e8 + 1.0

# def edlen_vac2air(vacuum_wavelength):
#     return vacuum_wavelength / edlen_n(vacuum_wavelength) 

# def edlen_air2vac(air_wave):
#     return air_wave * edlen_n(air_wave)
    
# def inverse_edlen_air2vac(air_wave, tolerance=1.0e-14, maxiter=20):
#     """One-step process"""
#     diff1 = edlen_vac2air(edlen_air2vac(air_wave)) - air_wave
#     return edlen_air2vac(air_wave - diff1)    
    
def inverse_edlen_air2vac(air_wave, tolerance=1.0e-14, maxiter=20):
    """Iteratively invert the edlen formula."""
    iteration = 0
    previous_refraction = 0.0
    refraction_index = 1.0
    while (np.any(np.abs(refraction_index - previous_refraction) > tolerance)) and (iteration < maxiter):
        previous_refraction = refraction_index
        sigma = 1.0e4 / (air_wave * previous_refraction)
        rightside = 8342.13 + 2406030.0 / (130.0 - sigma**2) + 15997.0 / (38.9 - sigma**2)
        refraction_index = rightside / 1.0e8 + 1.0
        iteration += 1
    return air_wave * refraction_index
    
def main():
    """docstring for main"""
    parser = argparse.ArgumentParser(description='Parse.')
    parser.add_argument('analysisFile', action="store", nargs='?', default='', type=str) # Positional 
    parser.add_argument('--clobber', action="store", type=bool, default=False)
    args = parser.parse_args()

    inputfile = args.analysisFile
    outputfile = ''.join(['fxb_', inputfile])
    hdu = pf.open(inputfile)    

    wave = {}
    flux = {}
    error = {}
    # $$ \lambda(x, order) = \sum_{i = 0}^d A(i + order(d + 1)) * x ^ i$$
    # d = ESO DRS CAL TH DEG LL
    # A = ESO DRS CAL TH COEFF LL
    # order (internal numbering of the order (raw number in the e2ds frame)). 

    # compute error per pixel by summing under quadrature
    # readout_noise squared + shot noise (flux * ADU_to_e_conversion)
    readout_noise = float(hdu[0].header['ESO DRS CCD SIGDET'])
    ADU_to_e_conversion = float(hdu[0].header['ESO DRS CCD CONAD'])
    number_of_pixels = float(hdu[0].header['ESO DET WIN1 NX'])
    # the shot noise, after the conversion  from  ADU to  e- (conv. factor 1.34) 
    # RON which can  be found in the fits header with the keyword  DRS.CCD.SIGDET.
    for order in xrange(len(hdu[0].data)):
        splat = [4 * order, 4 * (order) + 1, 4 * (order) + 2, 4 * (order) + 3]
        A0, A1, A2, A3 = hdu[0].header['ESO DRS CAL TH COEFF LL' + str(splat[0])], \
                                        hdu[0].header['ESO DRS CAL TH COEFF LL' + str(splat[1])], \
                                        hdu[0].header['ESO DRS CAL TH COEFF LL' + str(splat[2])], \
                                        hdu[0].header['ESO DRS CAL TH COEFF LL' + str(splat[3])]
        flux[order] = hdu[0].data[order]
        # pixels = np.arange(len(flux[order])) # assumes 0 indexing for HARPS.
        pixels = np.arange(1, len(flux[order]) + 1) # assumes 1 indexing for HARPS.
        temp = A0 + pixels * A1 + A2 * pixels ** 2 + A3 * pixels ** 3
        wave[order] = inverse_edlen_air2vac(temp)
        # Convert back to ADU units
        error[order] = np.sqrt(number_of_pixels * readout_noise**2 + flux[order] * ADU_to_e_conversion) / ADU_to_e_conversion

    if os.path.exists(outputfile):
        os.remove(outputfile)
    # TODO add header information
    hdulist = pf.HDUList()
    for order in xrange(len(hdu[0].data)):
        # pf.append(outputfile, data=np.array([wave[order], flux[order], np.sqrt(np.abs(flux[order])) + HARPS_BASELINE_ERROR, np.ones_like(wave[order])]))
        pf.append(outputfile, data=np.array([wave[order], flux[order], error[order], np.ones_like(wave[order])]))

if __name__ == '__main__':
    main()


