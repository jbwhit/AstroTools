#!/usr/bin/env python
# encoding: utf-8
"""
plotvelocityshifts.py
Created by Jonathan Whitmore on 2012-08-08.
Copyright Jonathan Whitmore
Distributed under the Boost Software License, Version 1.0.

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated
by a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND
NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY,
WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

"""
import sys
import os
from pylab import *
import pylab as pl
import re
import numpy as np
import scipy.constants as spc
from scipy import optimize
import argparse
c = spc.c # speed of light in m/s

def main():
  parser = argparse.ArgumentParser(description='Run vpfit with specified fitting parameters.')
  parser.add_argument('qvalFile', action="store", nargs='?', default='qval.txt', type=str, help='qvals listed like: FeII2600 2600.1721140 1370.') 
  parser.add_argument('fort13File', action="store", nargs='?', default='fort.13', type=str, help='vshift file in fort.13 format. Make sure the starting file has the transitions labeled like: ! FeII1608') 
  parser.add_argument('fort26File', action="store", nargs='?', default='fort.26', type=str, help='vshift file in fort.26 format.') 
  parser.add_argument('--title', action="store", default="Velocity Chunks", type=str)
  parser.add_argument('--plotName', action="store", default="velshift.pdf", type=str)
  args = parser.parse_args()
  with open(args.qvalFile, 'r') as qvals:
    qvalDict = {}
    for line in qvals.read().splitlines():
      transition = line.split()[0]
      qvalDict[transition] = {}
      qvalDict[transition]['l'] = float(line.split()[1])
      qvalDict[transition]['w'] = (1./qvalDict[transition]['l']) * 1.e8
      qvalDict[transition]['q'] = float(line.split()[2])
      qvalDict[transition]['x'] = -2 * c * qvalDict[transition]['q'] / qvalDict[transition]['w']
      
  with open(args.fort13File, 'r') as startFile:
    vshiftDict = {}
    for line in startFile.read().splitlines():
      if re.search('>>', line):
        vshiftDict[line.split()[2][0:7]] = line.split()[-1] # dict[zvalue] = transitionName
        
  with open(args.fort26File,'r') as resultFile:
    for line in resultFile.read().splitlines():
      if re.search('>>', line):
        qvalDict[vshiftDict[line.split()[1][0:7]]]['v'] = float(line.split()[3]) * 1000.
        qvalDict[vshiftDict[line.split()[1][0:7]]]['e'] = float(line.split()[4]) * 1000.
        
  transitions = []
  xpositions = []
  ypositions = []
  errors = []
  fig = pl.figure()
  ax = fig.add_subplot(111)
  for transition in vshiftDict.itervalues():
    transitions.append(transition)
    xpositions.append( qvalDict[transition]['x'])
    ypositions.append( qvalDict[transition]['v'])
    errors.append( qvalDict[transition]['e'])
    pop = ax.errorbar(qvalDict[transition]['x'], qvalDict[transition]['v'], yerr=qvalDict[transition]['e'], fmt='bo')

  xpositions = np.array(xpositions)
  ypositions = np.array(ypositions)
  errors = np.array(errors)
  fitfunc = lambda p, x: p[0] + p[1] * x
  errfunc = lambda p, x, y, err: (y - fitfunc(p,x)) / err
  pinit = [0.1, 0.1]
  out = optimize.leastsq(errfunc, pinit, args=(xpositions, ypositions, errors), full_output=1)
  pfinal = out[0]
  x1 = min(xpositions)
  x2 = max(xpositions)
  ax.plot([x1, x2], [fitfunc(pfinal, x1), fitfunc(pfinal, x2)], color="red", label="{0:.2e}".format(pfinal[1]))
  ax.legend()

  ax.set_xlabel("x (-2cq/w)")
  ax.set_ylabel("dv (m/s)")
  ax.set_title(args.title)
  ax.plot([min(xpositions), max(xpositions)], np.zeros(2), 'c--', alpha=0.5)
  ax.plot([min(ypositions), max(ypositions)], np.zeros(2), 'c--', alpha=0.5)
  for label, x, y in zip(transitions, xpositions, ypositions):
    ax.annotate(
      label, 
      xy = (x, y), xytext = (-20, 20),
      textcoords = 'offset points', ha = 'right', va = 'bottom',
      bbox = dict(boxstyle = 'round,pad=0.5', fc = 'yellow', alpha = 0.5),
      arrowprops = dict(arrowstyle = '->', connectionstyle = 'arc3,rad=0'))

  fig.savefig(args.plotName)
  pass


if __name__ == '__main__':
  main()