#!/usr/bin/env python
'''
The simple program takes a valid formatted fort.13 file and performs 
several operations on it. 

It's default behavior is derived to be run from the findabs directory.

Things expected: 
A starting filename like: fort13s/base.0032.test.001.13
A string of | separated components to remove: 'al|aj|ak|AL'

Optional: 
Maximum number of combinations: --maxN 3
Different file output stem: --outputFileStem fort13s/weirdstem.

# =========
# = Usage =
# =========

pyremoveComponent 2012-09-27_17.30.58.852182.alpha.fit.13 'al|aj|ak|af|ab|AH' --maxN 3

'''
import sys
import re
import numpy as np
import argparse
import string
import glob
import itertools as it

def subsetcombination(components, maxN):
  """docstring for subsetcombination"""
  from itertools import combinations
  from itertools import chain  
  return chain.from_iterable(combinations(components, r) for r in range(1, maxN+1))
  pass

def main():
  """Parses a .13 format file and removes selected components"""
  Nlist = []
  labelList = []
  head = []
  body = []
  
  parser = argparse.ArgumentParser(description='Argument parser.')
  parser.add_argument('input13', action="store", nargs='?', default='', type=str) # 
  parser.add_argument('removeString', action="store", default='', type=str)
  parser.add_argument('--maxN', action="store", default=2, type=int)
  parser.add_argument('--outputFileStem', action="store", default='fort13s/starting.', type=str)
  parser.add_argument('--comment', action="store", default='', type=str)
  parser.add_argument('--noComment', action="store_true", default=False, help='Turn off comment prompt.')
  args = parser.parse_args()
  
  with open(args.input13, 'r') as f13:
    beginBody, beginHead = False, False
    for line in f13.read().splitlines():
      # Ignore comments and empty lines
      if (not line.strip().startswith('!') and (not line.strip().startswith('%')) and (line.strip() != '')): 
        if line.startswith('   *'):
          beginHead = True
        if beginHead == True:
          head.append(line)
        if beginBody == True:
          Nlist.append(float(line.split()[1][:-2]))
          body.append(line.split())
          labelList.append(line.split()[2][-2:])
        if line.startswith('  *'):
          beginHead = False
          beginBody = True
  
  # copy initial into not a test one (starting.0019.13 + starting.0019.test.001.13, *002.13, etc.)
  baseStem = args.outputFileStem
  listofFiles = glob.glob(baseStem + '*')
  baseCount = it.count(max([int(x) for x in set([x.split(baseStem)[1].split('.')[0] for x in listofFiles]) if x.isdigit()]) + 1)
  baseFilename = baseStem + str(baseCount.next()).zfill(3)
  with open(baseFilename + '.13', 'w') as baseFile:
    for line in head:
      print >>baseFile, line
    for line in body:
      print >>baseFile, ' ', '   '.join(line)
  
  testNumber = it.count(1)
  for subset in subsetcombination(set(args.removeString.lower().split('|')), args.maxN):
    filename = baseFilename + ".test." + str(testNumber.next()).zfill(3) + ".13"
    print filename, "--comment \"! rm:", '|'.join(subset) + "\""
    with open(filename, 'w') as outfile:
      print >>outfile, "! rm:", '|'.join(subset)
      if len(args.comment) > 0:
        print >>outfile,  "! ", args.comment
      for line in head:
        print >>outfile,  line
      for line in body:
        if line[2].translate(None, string.punctuation).translate(None, string.digits).lower() not in subset:
          print >>outfile,  ' ', '   '.join(line)
  pass
  
if __name__ == '__main__':
  main()

# removes lines from both lowercase and UPPERCASE of input
# $ removeComponent af oldfort.13 newfort.13
# removes lines containing af and AF 
# $1 line
# $2 oldfort.13
# $3 newfort.13
# trigger2=$(echo $1 | tr '[a-z]' '[A-Z]')
# echo "Removing: " $1 $trigger2
# grep -v $1 $2 | grep -v $trigger2 > $3